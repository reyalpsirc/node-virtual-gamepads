// Generated by CoffeeScript 2.3.0
(function() {
  /*
  Created by roba91 on 15/08/2016
  Virtual keyboard class
  */
  var config, fs, ioctl, uinput, uinputStructs, virtual_keyboard, winston;

  fs = require('fs');

  ioctl = require('ioctl');

  uinput = require('../lib/uinput');

  uinputStructs = require('../lib/uinput_structs');

  config = require('../config.json');

  winston = require('winston');

  winston.level = config.logLevel;

  virtual_keyboard = class virtual_keyboard {
    constructor() {}

    connect(callback, error) {
      return fs.open('/dev/uinput', 'w+', (err, fd) => {
        var i, j, uidev, uidev_buffer;
        if (err) {
          return error(err);
        } else {
          this.fd = fd;
          // Init buttons
          ioctl(this.fd, uinput.UI_SET_EVBIT, uinput.EV_KEY);
          for (i = j = 0; j <= 255; i = ++j) {
            ioctl(this.fd, uinput.UI_SET_KEYBIT, i);
          }
          uidev = new uinputStructs.uinput_user_dev;
          uidev_buffer = uidev.ref();
          uidev_buffer.fill(0);
          uidev.name = Array.from("Virtual keyboard");
          uidev.id.bustype = uinput.BUS_USB;
          uidev.id.vendor = 0x3;
          uidev.id.product = 0x4;
          uidev.id.version = 1;
          return fs.write(this.fd, uidev_buffer, 0, uidev_buffer.length, null, (err) => {
            if (err) {
              winston.log('error', err);
              return error(err);
            } else {
              try {
                ioctl(this.fd, uinput.UI_DEV_CREATE);
                return callback();
              } catch (error1) {
                error = error1;
                winston.log('error', error);
                fs.close(this.fd);
                this.fd = void 0;
                return this.connect(callback, error);
              }
            }
          });
        }
      });
    }

    disconnect(callback) {
      if (this.fd) {
        ioctl(this.fd, uinput.UI_DEV_DESTROY);
        fs.close(this.fd);
        this.fd = void 0;
        return callback();
      }
    }

    sendEvent(event) {
      var ev, ev_buffer, ev_end, ev_end_buffer;
      winston.log('debug', event);
      if (this.fd) {
        ev = new uinputStructs.input_event;
        ev.type = event.type;
        ev.code = event.code;
        ev.value = event.value;
        ev.time.tv_sec = Math.round(Date.now() / 1000);
        ev.time.tv_usec = Math.round(Date.now() % 1000 * 1000);
        ev_buffer = ev.ref();
        ev_end = new uinputStructs.input_event;
        ev_end.type = 0;
        ev_end.code = 0;
        ev_end.value = 0;
        ev_end.time.tv_sec = Math.round(Date.now() / 1000);
        ev_end.time.tv_usec = Math.round(Date.now() % 1000 * 1000);
        ev_end_buffer = ev_end.ref();
        fs.writeSync(this.fd, ev_buffer, 0, ev_buffer.length, null);
        return fs.writeSync(this.fd, ev_end_buffer, 0, ev_end_buffer.length, null);
      }
    }

  };

  module.exports = virtual_keyboard;

}).call(this);
